import numpy as np
import random
from environment import QlearningEnv
#import pygame
#from traffic import Traffic
from utils import copy_list
import copy
import pickle
import math
import time
import cProfile
from tabulate import tabulate




# map_width = 20000
# map_height = 20000

# map = pygame.Surface((map_width,map_height))

distances = {
    0: {1: 173.12}, 
    1: {0: 173.12, 2: 117.76}, 
    2: {1: 117.76, 3: 635.71, 4: 26.92}, 
    3: {4: 622.05, 59: 61.71, 60: 83.97}, 
    4: {5: 300.00, 6: 27.83}, 
    5: {6: 297.17, 96: 32.28}, 
    6: {8: 11.03, 34: 53.42}, 
    8: {2: 14.05, 61: 48.60}, 
    10: {2: 310.62}, 
    11: {5: 54.46, 98: 3}, 
    12: {11: 216.70, 13: 18.38}, 
    13: {12: 19.04, 14: 63.24}, 
    14: {13: 62.82, 15: 31.32}, 
    15: {14: 30.00, 16: 25.02, 37: 114.93}, 
    16: {17: 39.26}, 
    17: {15: 25.05, 18: 44.73}, 
    18: {65: 4.00, 86: 88.24}, 
    19: {20: 59.18, 66: 4.00}, 
    20: {21: 28.28, 67: 79.52}, 
    21: {22: 87.11, 68: 4.00}, 
    22: {23: 21.73}, 
    23: {24: 15.76, 69: 39.69}, 
    24: {15: 354.23, 22: 15.88, 25: 14.26}, 
    25: {24: 14.26, 26: 8.01, 27: 25.03}, 
    26: {25: 8.01}, 
    27: {25: 25.03}, 
    28: {29: 40.82}, 
    29: {74: 180.94, 30: 32.15}, 
    30: {29: 32.15, 31: 180.82, 78: 30.29}, 
    31: {30: 180.82}, 
    32: {33: 50.58, 75: 273.05}, 
    33: {32: 46.77, 34: 291.19}, 
    34: {6: 53.42, 33: 291.19, 35: 3.00}, 
    35: {34: 3.00}, 
    36: {16: 51.83}, 
    37: {38: 6.00, 39: 245.08}, 
    38: {37: 6.00}, 
    39: {79: 3.00, 81: 60.06}, 
    40: {36: 348.01, 81: 17.86}, 
    41: {81: 11.22}, 
    42: {83: 41.34, 85: 17.53}, 
    43: {101: 1.00, 102: 81.28}, 
    44: {43: 58.09, 45: 38.95}, 
    45: {44: 38.95, 87: 14.00, 88: 1.00},
    46: {44: 104.73, 91: 1.00}, 
    47: {46: 75.45}, 
    48: {49: 78.56, 99: 6.00}, 
    49: {48: 82.96, 51: 310.99, 64: 62.10}, 
    50: {47: 56.23, 64: 27.59}, 
    51: {49: 310.99}, 
    52: {53: 11.11, 54: 61.78, 85: 186.64}, 
    53: {52: 11.11, 54: 11.11}, 
    54: {52: 61.78, 53: 11.11, 55: 116.91}, 
    55: {54: 116.91, 92: 18.48, 93: 22.46}, 
    56: {57: 14.78, 92: 73.86, 95: 1.00 }, 
    57: {56: 14.78}, 
    58: {93: 121.72, 59: 13.42, 60: 64.23}, 
    59: {3: 61.71, 58: 13.42}, 
    60: {3: 79.79, 58: 64.23}, 
    61: {62: 146.25, 63: 1.00}, 
    62: {9: 134.62, 63: 6.36}, 
    63: {61: 1.00, 62: 6.36}, 
    64: {49: 62.10, 50: 27.59, 90: 2.00}, 
    65: {86: 4.00}, 
    66: {19: 4.00}, 
    67: {20: 79.52}, 
    68: {21: 4.00}, 
    69: {70: 8.55, 71: 310.10}, 
    70: {69: 8.55}, 
    71: {28: 17.98, 72: 4.44}, 
    73: {28: 4.76}, 
    74: {24: 142.97}, 
    75: {32: 273.05, 76: 88.39}, 
    76: {75: 73.87, 77: 148.29}, 
    77: {76: 148.29, 78: 55.88}, 
    78: {30: 30.29, 77: 49.75}, 
    79: {39: 3.00}, 
    80: {40: 17.58}, 
    81: {41: 11.22, 80: 16.61, 82: 125.34}, 
    82: {80: 108.83, 83: 47.92}, 
    83: {82: 48.40, 85: 51.31}, 
    84: {42: 15.34}, 
    85: {48: 133.55, 52: 186.64, 84: 20.44}, 
    86: {19: 25.84, 65: 4.00},
    87: {45: 14.00},
    88: {45: 1.00},
    90: {64: 2.00},
    91: {46: 1.00},
    92: {55: 18.48, 56: 73.86, 95: 1.00 },
    93: {55: 22.46, 58: 121.72, 94: 23.71},
    94: {93: 23.71},
    95: {92: 1.00, 56: 1.00 },
    96: {12: 240.73, 97: 5.00},
    97: {96: 5.00},
    98: {11: 3.00},
    99: {84: 122.42, 100: 6.00},
    100: {99: 5.00},
    101: {43: 1.00, 102: 1.00},
    102: {84: 223.24, 101: 1.00},
}

coordinates = {

}


carpark_idxs = [0,26,27,35,38,53,57,59,63,65,66,67,68,70,79,87,88,90,91,94,95,97,98,100,101,105]


def argmax(dict):
    return max(dict, key=dict.get)

def maxa(dict):
    return max(dict.values())

#Q-Learning

env = QlearningEnv(distances, carpark_idxs)

# #Hyperparameters
max_epsilon = 1.0           
min_epsilon = 0.05           
decay_rate = 0.0005 #0.00005
convergence_threshold = 0.01


def train(episodes, alpha, gamma, q_table, decay_rate=decay_rate):
    rewards = 0
    timesteps = 0
    
    distance_travelled = 0
    total_cars = 0
    cars_seen = 0
    has_converged = False
    true_convergence = False
    eps_to_convergence = episodes
    successful_episodes = 0
    trend = []
    
    for episode in range(1, episodes + 1):
        prev_q_table = copy.deepcopy(q_table) 
        deadend = False
        #Decay epsilon
        epsilon = min_epsilon + (max_epsilon - min_epsilon)*np.exp(-decay_rate*episode)
        
        state, init_cars = env.reset(episode, episodes)
        done = False
        timesteps_ep = 0
        
        while not done:
            if random.uniform(0, 1) < epsilon:
                action = env.action_sample()
            else:
                action = argmax(q_table[state])

            next_state, reward, done, deadend, distance, cars, visited = env.step(action) 
            
            
            #metrics
            rewards += reward
            timesteps_ep += 1
            distance_travelled += distance
            cars_seen += cars

            if deadend or timesteps_ep >= 200: 
                done = True
            
            old_value = q_table[state][action]
            next_max = maxa(q_table[next_state])

            new_value = (1 - alpha) * old_value + alpha * (reward + gamma * next_max)
            q_table[state][action] = new_value

            state = next_state
          
        
        total_cars += init_cars
        timesteps += timesteps_ep
        if episode % 100 == 0: trend.append((episode, rewards, timesteps))
        if not deadend: 
            successful_episodes += 1
        
        if convergence(prev_q_table, q_table) and not has_converged:
            has_converged = True
            eps_to_convergence = episode

        if convergence(prev_q_table, q_table) and has_converged:
            if episode == 0.5 * episodes + eps_to_convergence:
                true_convergence = True

        if not convergence(prev_q_table, q_table) and has_converged:
            has_converged = False
            eps_to_convergence = episodes
            if true_convergence: true_convergence = False
        

    return (
        prev_q_table, 
        q_table, 
        rewards, 
        timesteps, 
        distance_travelled, 
        has_converged, 
        true_convergence, 
        eps_to_convergence, 
        cars_seen, 
        total_cars,
        successful_episodes,
        episodes,
        trend)

def calc_metrics(metrics):
    prev_q_table, q_table, rewards, timesteps, distance_travelled, has_converged, true_convergence, eps_to_convergence, cars_seen, total_cars, successful_episodes, episodes, trend = metrics
    avg_reward = rewards / episodes
    avg_timesteps = timesteps / episodes
    avg_distance = distance_travelled / episodes
    cars_perc = (cars_seen / total_cars) * 100
    success_rate = (successful_episodes / episodes) * 100

    # print(prev_q_table)
    print(q_table)
    print(trend)
    print('\n\n ================================================')
    print(
        f"Episodes: {episodes} \n" +
        f"Average Reward per Episode: {avg_reward} \n" +  
        f"Average Timesteps per Episode: {avg_timesteps} \n" + 
        f"Average Distance Traveled per Episode: {avg_distance} \n" + 
        f"Convergence: {has_converged} \n" +  
        f"True Convergence: {true_convergence}  \n" + 
        f"Episodes to Convergence: {eps_to_convergence} \n" + 
        f"Percentage of Cars Encountered: {cars_perc} \n" +
        f"Number of Cars Encountered: {cars_seen} \n" +
        f"Number of Cars: {total_cars} \n" +
        f"Success Rate: {success_rate} \n" 
        )

def convergence(prev_table, curr_table):
    highest_con = 0
    for key, value in prev_table.items():
        for key2, _ in value.items():
            if math.isinf(prev_table[key][key2]) and math.isinf(curr_table[key][key2]):
                diff = 0
            else:
                diff = abs(prev_table[key][key2] - curr_table[key][key2])
            if diff > highest_con:
                highest_con = diff

    if highest_con < convergence_threshold:
        return True
    return False

q_table = copy_list(distances)
q_table[9] = {0: -np.inf}
q_table[72] = {0: -np.inf}
# q_table1 = {0: {1: np.float64(-18.34536656525653)}, 1: {0: np.float64(0.11004100535526717), 2: np.float64(-66.47797526078153)}, 2: {1: np.float64(-66.85107371037924), 3: np.float64(-1.3625425197261998), 4: np.float64(-43.141421010871426)}, 3: {4: np.float64(-8.790355430743297), 59: np.float64(23.205795401656), 60: np.float64(-2.80614127726)}, 4: {5: np.float64(-52.255875938338185), 6: np.float64(-7.668314923506671)}, 5: {6: np.float64(-51.252157735655764), 96: np.float64(-40.353332745311995)}, 6: {8: np.float64(-54.395785906791104), 34: np.float64(-36.40558933250426)}, 8: {2: np.float64(-40.72568922344321), 61: np.float64(-25.678637475031994)}, 10: {2: np.float64(-0.16501804643832002)}, 11: {5: np.float64(-33.51740789471314), 98: 18.45379149139904}, 12: {11: np.float64(-27.862580532836507), 13: np.float64(-68.432777445105)}, 13: {12: np.float64(-58.70293142548968), 14: np.float64(-49.97437096199677)}, 14: {13: np.float64(-36.061292994271135), 15: np.float64(-77.09852411088133)}, 15: {14: np.float64(-59.95208819076428), 16: np.float64(-272.17976179242015), 37: np.float64(-217.35267346145827)}, 16: {17: np.float64(-393.1818785989181)}, 17: {15: np.float64(-141.68633004683315), 18: np.float64(-327.47781380275626)}, 18: {65: np.float64(-189.6654878654908), 86: np.float64(-172.31743907981945)}, 19: {20: np.float64(-219.16389050882339), 66: np.float64(-781.837231358543)}, 20: {21: np.float64(-206.0346761134889), 67: np.float64(-617.9069520658968)}, 21: {22: np.float64(-251.4963491254593), 68: np.float64(-10.26883160322599)}, 22: {23: np.float64(-297.28119615533654)}, 23: {24: np.float64(-183.8936012932443), 69: np.float64(-167.6257589940166)}, 24: {15: np.float64(-290.94775530275973), 22: np.float64(-136.7126130401756), 25: np.float64(-7.883861789319864)}, 25: {24: np.float64(-13.308922855653318), 26: np.float64(4.697246984641655), 27: np.float64(14.948748693703758)}, 26: {25: np.float64(-8.038888509796887)}, 27: {25: np.float64(-1.5625807039479305)}, 28: {29: np.float64(-159.9724292249101)}, 29: {74: np.float64(-230.56592688786623), 30: np.float64(-15.17437548065229)}, 30: {29: np.float64(-53.33284168279892), 31: np.float64(-61.73819446497827), 78: np.float64(-63.310718172137115)}, 31: {30: np.float64(-70.53762117305345)}, 32: {33: np.float64(-32.04728677604663), 75: np.float64(-35.65286500036368)}, 33: {32: np.float64(-27.692443018397228), 34: np.float64(-42.23009914649386)}, 34: {6: np.float64(-46.92632304910698), 33: np.float64(-45.12096536355728), 35: np.float64(-14.05267889197283)}, 35: {34: np.float64(-30.702791629003215)}, 36: {16: np.float64(-297.70377722861076)}, 37: {38: np.float64(-559.7172445642497), 39: np.float64(-184.88093517902146)}, 38: {37: np.float64(-519.1993906916393)}, 39: {79: np.float64(-21.520639313756295), 81: np.float64(-204.9796581676213)}, 40: {36: np.float64(-280.5905326814211), 81: np.float64(-209.02301390358338)}, 41: {81: np.float64(-122.07032414548061)}, 42: {83: np.float64(-28.937400991312035), 85: np.float64(-7.654105647472555)}, 43: {101: np.float64(8.706998697719001), 102: np.float64(3.6109695461856184)}, 44: {43: np.float64(0.8736873177244995), 45: -0.6262884138500002}, 45: {44: np.float64(-1.8689766986874932), 87: 9.97116796, 88: 9.999775}, 46: {44: np.float64(-0.5299277109665865), 91: 27.089420369475004}, 47: {46: np.float64(2.7218767207486505)}, 48: {49: np.float64(-8.188250083241215), 99: np.float64(-8.715647646375903)}, 49: {48: np.float64(-13.7650625472056), 51: np.float64(-0.5996247225000001), 64: np.float64(1.3763905519739157)}, 50: {47: np.float64(-0.2371614687561), 64: np.float64(0.9905949056268624)}, 51: {49: np.float64(-1.6579387321000132)}, 52: {53: np.float64(42.340730366537834), 54: np.float64(5.458037009498762), 85: np.float64(-6.3565552568545325)}, 53: {52: np.float64(6.4047088920860205), 54: np.float64(3.0642404520851203)}, 54: {52: np.float64(3.544771613435313), 53: np.float64(38.334380551900715), 55: np.float64(-1.5080206581529305)}, 55: {54: np.float64(4.9494915265155495), 92: np.float64(-6.2577891381620905), 93: np.float64(-9.865240456489577)}, 56: {57: np.float64(15.29136181256271), 92: np.float64(-8.792464819636676), 95: np.float64(10.966310045335831)}, 57: {56: np.float64(-8.14530966203176)}, 58: {93: np.float64(0.31223668265740023), 59: np.float64(5.075423303899999), 60: np.float64(-3.0617474858390006)}, 59: {3: -0.007235435790000001, 58: 0}, 60: {3: np.float64(-2.7527967055042684), 58: 0}, 61: {62: np.float64(1.700883775497538), 63: np.float64(-18.144539212828537)}, 62: {9: np.float64(-np.inf), 63: np.float64(12.049935038435958)}, 63: {61: np.float64(-2.1002094791644144), 62: np.float64(-2.324939034840046)}, 64: {49: np.float64(-3.032641966997753), 50: np.float64(-2.374303258004816), 90: np.float64(31.255989609211895)}, 65: {86: np.float64(-278.57049681296354)}, 66: {19: np.float64(-702.125503658033)}, 67: {20: np.float64(-536.6469522004305)}, 68: {21: np.float64(-16.15615186779355)}, 69: {70: np.float64(-48.27526342267651), 71: np.float64(-196.3649118509304)}, 70: {69: np.float64(-69.26012374911465)}, 71: {28: np.float64(-175.5283214165696), 72: np.float64(-np.inf)}, 73: {28: np.float64(-10.638249227934644)}, 74: {24: np.float64(-211.2022701714877)}, 75: {32: np.float64(-39.96865051235446), 76: np.float64(-67.25481450537568)}, 76: {75: np.float64(-60.43620953070458), 77: np.float64(-206.7983360167701)}, 77: {76: np.float64(-191.07896836806282), 78: np.float64(-224.85386735100207)}, 78: {30: np.float64(-99.95913317840962), 77: np.float64(-244.31793597360883)}, 79: {39: np.float64(-29.104216712293415)}, 80: {40: np.float64(-354.14348190004085)}, 81: {41: np.float64(-109.55405582008748), 80: np.float64(-315.37110683896896), 82: np.float64(-134.36764568272142)}, 82: {80: np.float64(-159.3578980115707), 83: np.float64(-53.92325209611681)}, 83: {82: np.float64(-66.4641022601882), 85: np.float64(-16.13493492305226)}, 84: {42: np.float64(-25.867323855962457)}, 85: {48: np.float64(-9.27665493574103), 52: np.float64(5.833654133081362), 84: np.float64(-26.487011085193732)}, 86: {19: np.float64(-210.9574665786347), 65: np.float64(-48.55263925979917)}, 87: {45: 0.5980740776000001}, 88: {45: 0.5999855000000001}, 90: {64: np.float64(0.04225066904002617)}, 91: {46: 0}, 92: {55: np.float64(-4.117499548237822), 56: np.float64(2.622719469489601), 95: np.float64(-4.620843184742475)}, 93: {55: np.float64(-8.503681530733552), 58: np.float64(-7.905212448175206), 94: np.float64(-3.6755776680812544)}, 94: {93: np.float64(-15.24999784729758)}, 95: {92: np.float64(-5.4020172148851895), 56: np.float64(-13.792672131335944)}, 96: {12: np.float64(-38.5693748920286), 97: 13.210028191109997}, 97: {96: 0}, 98: {11: 0.5945346939839999}, 99: {84: np.float64(-15.993239867921634), 100: 18.96508552636}, 100: {99: 0}, 101: {43: np.float64(-0.030194149645399994), 102: np.float64(1.4248192769726602)}, 102: {84: np.float64(-3.432888254909342), 101: np.float64(26.920523976211005)}, 9: {0: -np.inf}, 72: {0: -np.inf}}
# q_table2 = {0: {1: np.float64(-16.036778218940615)}, 1: {0: np.float64(8.733703736504351), 2: np.float64(-60.076541460286954)}, 2: {1: np.float64(-60.17323129662), 3: np.float64(-52.51162161446683), 4: np.float64(-38.99990224071962)}, 3: {4: np.float64(-129.21758842562474), 59: np.float64(-103.01212265814189), 60: np.float64(-114.72473173685347)}, 4: {5: np.float64(-170.66691076444891), 6: np.float64(-19.39695182695401)}, 5: {6: np.float64(-156.5160851622901), 96: np.float64(-61.96179327531502)}, 6: {8: np.float64(-186.12058050698317), 34: np.float64(-133.0898404752733)}, 8: {2: np.float64(-71.65420149405057), 61: np.float64(-133.76182609505122)}, 10: {2: np.float64(-0.16501804643832002)}, 11: {5: np.float64(-37.05420409061442), 98: np.float64(28.0685059628617)}, 12: {11: np.float64(-24.69034498975662), 13: np.float64(-117.97132333886792)}, 13: {12: np.float64(-86.79623781461883), 14: np.float64(-160.53386654627687)}, 14: {13: np.float64(-138.27417743749172), 15: np.float64(-150.48551004096532)}, 15: {14: np.float64(-115.24017627115961), 16: np.float64(-204.93357244542585), 37: np.float64(-174.95560093186182)}, 16: {17: np.float64(-172.24169764704988)}, 17: {15: np.float64(-109.25076615885523), 18: np.float64(-186.49544388594944)}, 18: {65: np.float64(-150.46722608509162), 86: np.float64(-138.85659668114533)}, 19: {20: np.float64(-174.35785621198488), 66: np.float64(-700.5017107714432)}, 20: {21: np.float64(-105.93547080140138), 67: np.float64(-421.1185850887397)}, 21: {22: np.float64(-221.31658857623142), 68: np.float64(14.968626455242383)}, 22: {23: np.float64(-213.58496068733496)}, 23: {24: np.float64(-213.54322047861652), 69: np.float64(-98.55987579856854)}, 24: {15: np.float64(-170.24963941587384), 22: np.float64(-235.02282498606914), 25: np.float64(-83.19936543308853)}, 25: {24: np.float64(-83.38109498157908), 26: np.float64(-28.543295369429487), 27: np.float64(-12.484150926444578)}, 26: {25: np.float64(-38.24244146529669)}, 27: {25: np.float64(-29.69372020060277)}, 28: {29: np.float64(-82.90286744368416)}, 29: {74: np.float64(-134.5894052322245), 30: np.float64(-69.61551673838659)}, 30: {29: np.float64(-93.71884612800739), 31: np.float64(-125.63969582358904), 78: np.float64(-146.49239860783968)}, 31: {30: np.float64(-129.9945797936788)}, 32: {33: np.float64(-127.92697642859414), 75: np.float64(-83.58589348748592)}, 33: {32: np.float64(-103.97882805940141), 34: np.float64(-69.99236798536701)}, 34: {6: np.float64(-176.4505648173149), 33: np.float64(-55.63670474075363), 35: np.float64(-109.29859921144016)}, 35: {34: np.float64(-147.5753716672347)}, 36: {16: np.float64(-241.56928104109403)}, 37: {38: np.float64(-419.5719079311292), 39: np.float64(-103.25789210423775)}, 38: {37: np.float64(-475.6291786525527)}, 39: {79: np.float64(6.9301412102958135), 81: np.float64(-149.54608075953374)}, 40: {36: np.float64(-249.73745438324914), 81: np.float64(-126.7055777694411)}, 41: {81: np.float64(-86.03429580221722)}, 42: {83: np.float64(-30.12339572480518), 85: np.float64(-33.83125579985261)}, 43: {101: np.float64(31.183361108825796), 102: np.float64(6.339792678732482)}, 44: {43: np.float64(3.6944762394626105), 45: 0.4023686478774997}, 45: {44: np.float64(-1.4620064569509874), 87: 26.806951164993446, 88: 18.7574665251}, 46: {44: np.float64(-0.320269074146567), 91: np.float64(30.715910028384748)}, 47: {46: np.float64(6.218410623941746)}, 48: {49: np.float64(-26.73837197750093), 99: np.float64(-19.942277870059293)}, 49: {48: np.float64(-23.019841258207265), 51: np.float64(-23.92952472896668), 64: np.float64(-5.523510578963499)}, 50: {47: np.float64(-0.5597410719433837), 64: np.float64(9.565541499366434)}, 51: {49: np.float64(-27.301063702038896)}, 52: {53: np.float64(17.982726793246783), 54: np.float64(-12.124415187773531), 85: np.float64(-22.87368346098965)}, 53: {52: np.float64(-8.781977706755576), 54: np.float64(-21.82542661095218)}, 54: {52: np.float64(-10.687570131889046), 53: np.float64(30.994023537949975), 55: np.float64(-30.18207745331668)}, 55: {54: np.float64(1.4345143255489186), 92: np.float64(-7.704942717472595), 93: np.float64(-66.42474841278366)}, 56: {57: np.float64(15.29136181256271), 92: np.float64(-8.792464819636676), 95: np.float64(10.966310045335831)}, 57: {56: np.float64(-8.14530966203176)}, 58: {93: np.float64(-46.20584884358207), 59: np.float64(-51.934840259485625), 60: np.float64(-129.82537988469707)}, 59: {3: np.float64(-86.80442354623612), 58: np.float64(-106.31463823883323)}, 60: {3: np.float64(-171.07213101325513), 58: np.float64(-88.10564405041295)}, 61: {62: np.float64(-118.46362978093092), 63: np.float64(-13.57748064624165)}, 62: {9: np.float64(-np.inf), 63: np.float64(-126.87831949104586)}, 63: {61: np.float64(-2.2440302444276328), 62: np.float64(-158.15359909228692)}, 64: {49: np.float64(-10.741111379968364), 50: np.float64(-4.477091653140582), 90: np.float64(51.52228520173409)}, 65: {86: np.float64(-202.49289689870747)}, 66: {19: np.float64(-589.5914814773787)}, 67: {20: np.float64(-449.1486431824037)}, 68: {21: np.float64(-13.331802982172436)}, 69: {70: np.float64(-32.630501078865535), 71: np.float64(-162.32916809336697)}, 70: {69: np.float64(-57.576111677349736)}, 71: {28: np.float64(-129.06815501362536), 72: np.float64(-np.inf)}, 73: {28: np.float64(-26.3317346496883)}, 74: {24: np.float64(-107.95637428438222)}, 75: {32: np.float64(-108.1009596078236), 76: np.float64(-102.75603381804137)}, 76: {75: np.float64(-107.79464936121903), 77: np.float64(-166.0952139406615)}, 77: {76: np.float64(-144.72006164385976), 78: np.float64(-156.48440840506188)}, 78: {30: np.float64(-136.12479643617215), 77: np.float64(-182.98734925917066)}, 79: {39: np.float64(-24.42821880312813)}, 80: {40: np.float64(-166.61316595632175)}, 81: {41: np.float64(-85.81118176338542), 80: np.float64(-240.7827301863938), 82: np.float64(-80.57235879092244)}, 82: {80: np.float64(-166.61923829082838), 83: np.float64(-40.46662938477093)}, 83: {82: np.float64(-58.76189848100636), 85: np.float64(-17.5816450949622)}, 84: {42: np.float64(-46.92138293839349)}, 85: {48: np.float64(-33.27032840482911), 52: np.float64(-6.179577022590618), 84: np.float64(-45.84717505792366)}, 86: {19: np.float64(-202.8710884808031), 65: np.float64(-81.46268247840129)}, 87: {45: 1.663518661346}, 88: {45: 1.665433941506}, 90: {64: np.float64(9.250386153732904)}, 91: {46: np.float64(1.3429506017030848)}, 92: {55: np.float64(-9.827578944613679), 56: np.float64(2.622719469489601), 95: np.float64(14.364453564321686)}, 93: {55: np.float64(-39.536037246583206), 58: np.float64(-70.1831634115709), 94: np.float64(-46.7126641358277)}, 94: {93: np.float64(-63.258728786231174)}, 95: {92: np.float64(-5.4020172148851895), 56: np.float64(-13.792672131335944)}, 96: {12: np.float64(-62.44604657825495), 97: 19.673743057990258}, 97: {96: 3.040940232529727}, 98: {11: 0.5945346939839999}, 99: {84: np.float64(-44.97484099684825), 100: np.float64(12.937588221628687)}, 100: {99: np.float64(-10.927658409940697)}, 101: {43: np.float64(2.337282449095234), 102: np.float64(5.272730123670712)}, 102: {84: np.float64(-11.510183862777648), 101: np.float64(23.02173072392197)}, 9: {0: -np.inf}, 72: {0: -np.inf}}
# q_table3 = {0: {1: np.float64(-10.583306117489823)}, 1: {0: np.float64(34.4942341821166), 2: np.float64(-60.076541460286954)}, 2: {1: np.float64(-54.790658992367746), 3: np.float64(-52.51162161446683), 4: np.float64(-35.81850854651478)}, 3: {4: np.float64(-110.02299241204177), 59: np.float64(-58.5555722208582), 60: np.float64(-103.3693531813332)}, 4: {5: np.float64(-157.9693562841702), 6: np.float64(-37.99466306633691)}, 5: {6: np.float64(-136.3465397516589), 96: np.float64(-42.119348105856766)}, 6: {8: np.float64(-123.72700414836952), 34: np.float64(-145.24080913031852)}, 8: {2: np.float64(-63.704681044183005), 61: np.float64(-94.99455349338574)}, 10: {2: np.float64(-0.16501804643832002)}, 11: {5: np.float64(-49.456190963210624), 98: np.float64(56.07741066750487)}, 12: {11: np.float64(-11.079235490213126), 13: np.float64(-98.03047285945539)}, 13: {12: np.float64(-49.10567711403362), 14: np.float64(-156.30782403997273)}, 14: {13: np.float64(-115.88744541546725), 15: np.float64(-142.9444546519693)}, 15: {14: np.float64(-123.78233546440843), 16: np.float64(-160.14868782880842), 37: np.float64(-135.18102047959331)}, 16: {17: np.float64(-147.3009219363121)}, 17: {15: np.float64(-119.51362030950841), 18: np.float64(-153.60850929525745)}, 18: {65: np.float64(-147.522237868731), 86: np.float64(-122.14728386467922)}, 19: {20: np.float64(-178.0160128555455), 66: np.float64(-587.9418805766237)}, 20: {21: np.float64(-130.9805590092858), 67: np.float64(-405.9982394629099)}, 21: {22: np.float64(-255.5314366276075), 68: np.float64(-171.36180211536444)}, 22: {23: np.float64(-298.0012291567839)}, 23: {24: np.float64(-174.21487992864834), 69: np.float64(-236.6690943928028)}, 24: {15: np.float64(-142.39983826922548), 22: np.float64(-317.2194321722947), 25: np.float64(-101.39522910611338)}, 25: {24: np.float64(-117.16710261604413), 26: np.float64(19.000747022345116), 27: np.float64(-3.0509926551500133)}, 26: {25: np.float64(-20.27171591792364)}, 27: {25: np.float64(-21.84817091583154)}, 28: {29: np.float64(-176.24100077864216)}, 29: {74: np.float64(-224.74276408952346), 30: np.float64(-128.6932317992961)}, 30: {29: np.float64(-143.70358228388014), 31: np.float64(-143.01209925596783), 78: np.float64(-136.7572142481085)}, 31: {30: np.float64(-148.00866786394883)}, 32: {33: np.float64(-106.34127913278049), 75: np.float64(-96.69329965852131)}, 33: {32: np.float64(-91.82627105343062), 34: np.float64(-119.83248644490274)}, 34: {6: np.float64(-193.43962409699984), 33: np.float64(-110.35054829715646), 35: np.float64(-71.83764833930776)}, 35: {34: np.float64(-127.4301600539057)}, 36: {16: np.float64(-166.6027087581965)}, 37: {38: np.float64(-317.4903505146065), 39: np.float64(-79.64584250227188)}, 38: {37: np.float64(-319.1965511437172)}, 39: {79: np.float64(-10.894906466402588), 81: np.float64(-132.69193055366233)}, 40: {36: np.float64(-184.66650820535932), 81: np.float64(-85.2775095338494)}, 41: {81: np.float64(-63.11570791994468)}, 42: {83: np.float64(-94.86271713396692), 85: np.float64(-137.27735298284276)}, 43: {101: np.float64(-12.518492750948647), 102: np.float64(-35.11158824195792)}, 44: {43: np.float64(-51.720463592775914), 45: -2.1147762377147563}, 45: {44: np.float64(-2.944964302483237), 87: 3.035720636341744, 88: 21.742105512288695}, 46: {44: np.float64(-63.988643854195104), 91: np.float64(-43.42687032053233)}, 47: {46: np.float64(-77.80784039964973)}, 48: {49: np.float64(-116.51971725547746), 99: np.float64(-102.17050141089948)}, 49: {48: np.float64(-110.54756074268147), 51: np.float64(-81.91015233626595), 64: np.float64(-102.07178129463718)}, 50: {47: np.float64(-89.95110999194425), 64: np.float64(1.4027040676850695)}, 51: {49: np.float64(-93.51748561708277)}, 52: {53: np.float64(12.895572455021913), 54: np.float64(-59.75615486891625), 85: np.float64(-106.46449243003514)}, 53: {52: np.float64(-60.084919544899854), 54: np.float64(-54.46022443536044)}, 54: {52: np.float64(-13.690740563277497), 53: np.float64(-52.21656528443336), 55: np.float64(-32.641765180666205)}, 55: {54: np.float64(-11.79031833554934), 92: np.float64(-6.167969327919657), 93: np.float64(-68.10245656432141)}, 56: {57: np.float64(3.192442639520669), 92: np.float64(-21.949804250751285), 95: np.float64(-7.346646822278016)}, 57: {56: np.float64(-24.753308693093487)}, 58: {93: np.float64(-41.787131231183075), 59: np.float64(-50.95883578831199), 60: np.float64(-114.92040037035213)}, 59: {3: np.float64(-80.73701401211058), 58: np.float64(-91.3953458385698)}, 60: {3: np.float64(-140.31628514104722), 58: np.float64(-82.64244630808658)}, 61: {62: np.float64(-106.23949269113896), 63: np.float64(-9.187498582985937)}, 62: {9: np.float64(-np.inf), 63: np.float64(-63.56783197310905)}, 63: {61: np.float64(-17.23767092107533), 62: np.float64(-122.91063277623685)}, 64: {49: np.float64(-90.91278506962115), 50: np.float64(-76.83857257881729), 90: np.float64(-21.156510287788844)}, 65: {86: np.float64(-207.52557515297312)}, 66: {19: np.float64(-541.09382070236)}, 67: {20: np.float64(-412.9447696584356)}, 68: {21: np.float64(-210.49828896867348)}, 69: {70: np.float64(-159.29408495813428), 71: np.float64(-253.50927420196513)}, 70: {69: np.float64(-145.33152764663444)}, 71: {28: np.float64(-206.14353958205822), 72: np.float64(-np.inf)}, 73: {28: np.float64(-28.67275588894052)}, 74: {24: np.float64(-205.62780598716154)}, 75: {32: np.float64(-107.5106061969765), 76: np.float64(-129.53373774412228)}, 76: {75: np.float64(-126.40384202347987), 77: np.float64(-162.96531108890446)}, 77: {76: np.float64(-138.9408265727643), 78: np.float64(-165.56460138724157)}, 78: {30: np.float64(-134.57184954162085), 77: np.float64(-175.0576818668115)}, 79: {39: np.float64(-31.020837537008582)}, 80: {40: np.float64(-110.47575770991169)}, 81: {41: np.float64(-64.38112696401703), 80: np.float64(-152.02675697122731), 82: np.float64(-96.68686487479164)}, 82: {80: np.float64(-139.94205039787192), 83: np.float64(-121.0339149154888)}, 83: {82: np.float64(-139.61657093587803), 85: np.float64(-75.8065015125866)}, 84: {42: np.float64(-139.82170453119886)}, 85: {48: np.float64(-127.3187879858637), 52: np.float64(-61.16780966299423), 84: np.float64(-171.3569350626712)}, 86: {19: np.float64(-206.72738631348264), 65: np.float64(-110.69134855361176)}, 87: {45: -13.879818180907929}, 88: {45: -6.41194597303647}, 90: {64: np.float64(-44.719290119325784)}, 91: {46: np.float64(-54.147666696586754)}, 92: {55: np.float64(-18.914613332962382), 56: np.float64(-25.194140549010058), 95: np.float64(24.928561183399655)}, 93: {55: np.float64(-34.5885916539943), 58: np.float64(-59.498325123053675), 94: np.float64(-25.64469195053375)}, 94: {93: np.float64(-51.52937229928382)}, 95: {92: np.float64(-21.262821729659443), 56: np.float64(-22.238314200562506)}, 96: {12: np.float64(-62.046141179237715), 97: 41.056489958935515}, 97: {96: 4.821308638651184}, 98: {11: np.float64(6.271833609312132)}, 99: {84: np.float64(-159.69514818761044), 100: np.float64(-98.0276889871667)}, 100: {99: np.float64(-134.85391566012856)}, 101: {43: np.float64(-19.956711096555203), 102: np.float64(-34.27229114906068)}, 102: {84: np.float64(-68.39120288916956), 101: np.float64(-22.192978442686467)}, 9: {0: -np.inf}, 72: {0: -np.inf}}
# q_table4 = {0: {1: np.float64(-3.352771680249238)}, 1: {0: np.float64(38.735018433122036), 2: np.float64(-57.70043954203902)}, 2: {1: np.float64(-28.941363573681244), 3: np.float64(-65.93915881346003), 4: np.float64(-60.10925356207699)}, 3: {4: np.float64(-105.6823580217037), 59: np.float64(-38.11366281589439), 60: np.float64(-103.3693531813332)}, 4: {5: np.float64(-135.5870172787373), 6: np.float64(-87.65787565494142)}, 5: {6: np.float64(-128.84003872265052), 96: np.float64(-34.87988766296783)}, 6: {8: np.float64(-100.00133038588278), 34: np.float64(-104.73619865163718)}, 8: {2: np.float64(-72.5901345176201), 61: np.float64(-54.81725408931407)}, 10: {2: np.float64(-2.9507308768298572)}, 11: {5: np.float64(-47.11307266194013), 98: np.float64(77.3898806999509)}, 12: {11: np.float64(13.474791857419078), 13: np.float64(-86.46272170245916)}, 13: {12: np.float64(-32.47927694387807), 14: np.float64(-86.08778998799967)}, 14: {13: np.float64(-59.01532522333481), 15: np.float64(-95.25111235979101)}, 15: {14: np.float64(-79.72820043187778), 16: np.float64(-175.57790010019534), 37: np.float64(-232.25439092157748)}, 16: {17: np.float64(-238.3607528498667)}, 17: {15: np.float64(-153.038653099801), 18: np.float64(-238.31512424709115)}, 18: {65: np.float64(-209.31868854126245), 86: np.float64(-137.76374776587903)}, 19: {20: np.float64(-270.8290282372342), 66: np.float64(-461.8932190174737)}, 20: {21: np.float64(-254.90082428786596), 67: np.float64(-384.2777642758706)}, 21: {22: np.float64(-344.7342319519206), 68: np.float64(-215.4831132752244)}, 22: {23: np.float64(-293.64764527323666)}, 23: {24: np.float64(-141.92103915807283), 69: np.float64(-306.6031397641616)}, 24: {15: np.float64(-207.82587838170744), 22: np.float64(-262.5888881958594), 25: np.float64(-64.51422282866513)}, 25: {24: np.float64(-116.10540991653716), 26: np.float64(23.031150258347417), 27: np.float64(7.750896520433694)}, 26: {25: np.float64(-14.930996692046072)}, 27: {25: np.float64(-21.84817091583154)}, 28: {29: np.float64(-233.3283440526966)}, 29: {74: np.float64(-234.38365903170018), 30: np.float64(-95.19684923321068)}, 30: {29: np.float64(-99.61262864802379), 31: np.float64(-133.07225476602065), 78: np.float64(-109.45628491367185)}, 31: {30: np.float64(-143.1917334072057)}, 32: {33: np.float64(-94.38601499864939), 75: np.float64(-91.76389608474885)}, 33: {32: np.float64(-83.69423817004098), 34: np.float64(-93.83938084291762)}, 34: {6: np.float64(-151.26365565820697), 33: np.float64(-96.12214762713246), 35: np.float64(-55.25445809238539)}, 35: {34: np.float64(-111.27173198904943)}, 36: {16: np.float64(-266.93004068927814)}, 37: {38: np.float64(-460.15517761041747), 39: np.float64(-204.4836316523402)}, 38: {37: np.float64(-482.0941773297135)}, 39: {79: np.float64(-146.74614966262138), 81: np.float64(-261.40994088237943)}, 40: {36: np.float64(-269.90011184954017), 81: np.float64(-233.3256377649678)}, 41: {81: np.float64(-380.24087653575305)}, 42: {83: np.float64(-364.26025165672837), 85: np.float64(-277.79479427761646)}, 43: {101: np.float64(-47.992674012885786), 102: np.float64(-35.11158824195792)}, 44: {43: np.float64(-91.14064415882726), 45: np.float64(3.6744012520197478)}, 45: {44: np.float64(-3.477405793203121), 87: 11.732286118504899, 88: np.float64(41.90162656424273)}, 46: {44: np.float64(-97.54923657406133), 91: np.float64(-18.14059232385622)}, 47: {46: np.float64(-115.46654574894649)}, 48: {49: np.float64(-192.4142669620075), 99: np.float64(-412.33487019148265)}, 49: {48: np.float64(-208.01096935068094), 51: np.float64(-129.08411611394467), 64: np.float64(-182.60311922634986)}, 50: {47: np.float64(-134.08361461684754), 64: np.float64(-34.37181102649513)}, 51: {49: np.float64(-145.77797544790695)}, 52: {53: np.float64(-195.02255543972473), 54: np.float64(-272.9530291339654), 85: np.float64(-185.56805693274578)}, 53: {52: np.float64(-305.24404571787136), 54: np.float64(-152.5747738790796)}, 54: {52: np.float64(-107.52494159967513), 53: np.float64(-226.07083239400214), 55: np.float64(-223.10014083766492)}, 55: {54: np.float64(-126.28570095725013), 92: np.float64(-141.9861221268187), 93: np.float64(-135.61624222728778)}, 56: {57: np.float64(-21.863954439196558), 92: np.float64(-11.637122399704758), 95: np.float64(-3.408708535482855)}, 57: {56: np.float64(-20.705934205255787)}, 58: {93: np.float64(-40.25065906549679), 59: np.float64(-49.157403253749834), 60: np.float64(-109.16764061670212)}, 59: {3: np.float64(-62.84149426546298), 58: np.float64(-85.3483326341838)}, 60: {3: np.float64(-140.31628514104722), 58: np.float64(-72.86203367386382)}, 61: {62: np.float64(-83.06198392886886), 63: np.float64(8.130126151141859)}, 62: {9: np.float64(-np.inf), 63: np.float64(-49.49649223683496)}, 63: {61: np.float64(-14.858648379860714), 62: np.float64(-114.55692635532327)}, 64: {49: np.float64(-200.35874209993958), 50: np.float64(-132.46326522815144), 90: np.float64(-107.83951653721897)}, 65: {86: np.float64(-257.6759526141821)}, 66: {19: np.float64(-514.329776889772)}, 67: {20: np.float64(-395.7135527813948)}, 68: {21: np.float64(-248.69440137703128)}, 69: {70: np.float64(-147.4488978931651), 71: np.float64(-360.97283259158144)}, 70: {69: np.float64(-145.33152764663444)}, 71: {28: np.float64(-279.4730686262204), 72: np.float64(-np.inf)}, 73: {28: np.float64(-34.950457928413115)}, 74: {24: np.float64(-189.993869928592)}, 75: {32: np.float64(-97.58555142591335), 76: np.float64(-100.04341979398258)}, 76: {75: np.float64(-101.22619576283373), 77: np.float64(-111.53175105261633)}, 77: {76: np.float64(-107.69208106239864), 78: np.float64(-116.04829375231843)}, 78: {30: np.float64(-107.71616218970163), 77: np.float64(-129.03011204089762)}, 79: {39: np.float64(-175.48448829363122)}, 80: {40: np.float64(-299.07511648375834)}, 81: {41: np.float64(-412.8937813038634), 80: np.float64(-265.50878576187284), 82: np.float64(-244.99730440925762)}, 82: {80: np.float64(-233.2512829104133), 83: np.float64(-482.594872343547)}, 83: {82: np.float64(-427.3041917789771), 85: np.float64(-298.84045655325997)}, 84: {42: np.float64(-398.39787559720986)}, 85: {48: np.float64(-367.16076118932364), 52: np.float64(-189.54216916444838), 84: np.float64(-430.8760615237798)}, 86: {19: np.float64(-291.9195157013978), 65: np.float64(-89.2834160520695)}, 87: {45: -8.317974236711173}, 88: {45: -6.41194597303647}, 90: {64: np.float64(-159.58063246042258)}, 91: {46: np.float64(-46.91136273824486)}, 92: {55: np.float64(-38.764990262592875), 56: np.float64(-53.848081316787756), 95: np.float64(-100.83133809979942)}, 93: {55: np.float64(-122.72296793925983), 58: np.float64(-59.498325123053675), 94: np.float64(-56.748095762415986)}, 94: {93: np.float64(-87.02764199690361)}, 95: {92: np.float64(-57.8450424536681), 56: np.float64(-22.47324906441325)}, 96: {12: np.float64(-60.303456396771665), 97: 52.446398539845}, 97: {96: 7.173558443667728}, 98: {11: np.float64(9.009285888431211)}, 99: {84: np.float64(-431.59480377082417), 100: np.float64(-711.8526011551535)}, 100: {99: np.float64(-616.0953909416131)}, 101: {43: np.float64(-19.956711096555203), 102: np.float64(-131.4107019566532)}, 102: {84: np.float64(-126.61762729289106), 101: np.float64(-72.22599600111121)}, 9: {0: -np.inf}, 72: {0: -np.inf}}


# start_time = time.time()
# result = train(alpha=0.1, gamma=0.6, q_table=q_table, episodes=1)
# calc_metrics(result)
# end_time = time.time()
# def count_edges_directed(adjacency_list):
#     # Sum the lengths of the inner dictionaries (i.e., the number of neighbors)
#     edge_count = sum(len(neighbors) for neighbors in adjacency_list.values())
    
#     return edge_count
# print(count_edges_directed(distances))



# traffic = Traffic([[0, 0, 0],[0, 0, 0],[0, 0, 0]], lambda x : "o",  lambda x : "o", map, (0,1))
# traffic.start_simulation()
# traffic.run_simulation()

learning_rates = [0.1, 0.3, 0.5, 0.7]
discount_factors = [0.1, 0.6, 0.8, 0.95]
def tune():
    episodes = 1000
    num = 1
    for rate in learning_rates:
        for disc in discount_factors:
            q_table = copy_list(distances)
            q_table[9] = {0: -np.inf}
            q_table[72] = {0: -np.inf}

            result = train(alpha=rate, gamma=disc, q_table=q_table, episodes=episodes, decay_rate=0.0029)

            with open(f'q_table{num}.pkl', 'wb') as data:
                pickle.dump(q_table, data)
            num+= 1

            print(f"{rate} {disc} \n -------------------------- \n")
            calc_metrics(result)
#start_time = time.time()
#tune()
#end_time = time.time()
#print(start_time,end_time, end_time - start_time)

def random_carparks():
    return np.random.choice(carpark_idxs, size=np.random.choice(range(3, len(carpark_idxs) + 1)), replace=False)

start_pos = [pos for pos in distances.keys() if pos not in carpark_idxs]

#carpark_scenarios =[[88,90,91,94,95], [0,26,27,35], [53,57,59,63,95], [88,66], [26,43,90,0,70,35]]
def generate_scenarios():
    options = []
    carpark_scenarios =[[27, 35, 38, 53, 90], [63, 65, 87, 26], [87,  91], [35, 59], [0, 59, 95, 57, 63, 65, 26, 27]]
    carpark_scenarios.append(random_carparks())
    carpark_scenarios.append(random_carparks())

    traffic_scenarios = ["light", "medium", "heavy"]

    for node in start_pos:
        for traffic in traffic_scenarios:
            
            option = {
                "traffic": traffic,
                "start": node
            }

            options.append(option)
    
    return options

#options = generate_scenarios()
options = [
    # {
    #     "traffic": 'heavy',
    #     "start": 73
    # },
    # {
    #     "traffic": 'heavy',
    #     "start": 85
    # },
    {
        "traffic": 'heavy',
        "start": 42
    },
    {
        "traffic": 'heavy',
        "start": 75
    },
    {
        "traffic": 'medium',
        "start": 31
    },
    # {
    #     "traffic": 'medium',
    #     "start": 41
    # },
    # {
    #     "traffic": 'medium',
    #     "start": 10
    # },
    {
        "traffic": 'medium',
        "start": 49
    },
    # {
    #     "traffic": 'light',
    #     "start": 56
    # },
    {
        "traffic": 'light',
        "start": 58
    },
]

def train2(q_table, path, episodes=1):
    rewards = 0
    timesteps = 0
    distance_travelled = 0
    total_cars = 0
    cars_seen = 0
    successful_episodes = 0
    
    for episode in range(1, episodes + 1):
        
        deadend = False
        done = False
       
        #state, init_cars = env.reset(episode, episodes)
        env.reset(episode, episodes)
        state = path.pop(0)
        
        while not done:
            #action = argmax(q_table[state])
            action = path.pop(0)
            
            next_state, reward, done, deadend, distance, cars, visited = env.step(action) 
            
            # print(state, next_state, visited, action)
            # print(q_table[state])
            data = []
            print(f'current state: {state}')
            print('----------------------')

            for ac, vl in q_table[state].items():
                data.append([ac, vl])
            # Print the table using tabulate
            print(tabulate(data, ["States", "Value"], tablefmt="grid"))

            print(f"selected action: {next_state} \n")
            # print('----------------------')
            # print('=====================')
            
            

            #metrics
            rewards += reward
            timesteps += 1
            distance_travelled += distance
            cars_seen += cars

            if deadend: 
                done = True

            state = next_state
          
        
        #total_cars += init_cars

        if not deadend: 
            successful_episodes += 1

    return (
        rewards, 
        timesteps, 
        distance_travelled, 
        cars_seen, 
        total_cars,
        successful_episodes,
        episodes)

def calc_metrics2(metrics):
    rewards, timesteps, distance_travelled, cars_seen, total_cars, successful_episodes, episodes = metrics
    avg_reward = rewards / episodes
    avg_timesteps = timesteps / episodes
    avg_distance = distance_travelled / episodes
    cars_perc = (cars_seen / total_cars) * 100
    success_rate = (successful_episodes / episodes) * 100

    print('\n\n ================================================')
    print(
        f"Episodes: {episodes} \n" +
        f"Average Reward per Episode: {avg_reward} \n" +  
        f"Average Timesteps per Episode: {avg_timesteps} \n" + 
        f"Average Distance Traveled per Episode: {avg_distance} \n" + 
        f"Percentage of Cars Encountered: {cars_perc} \n" +
        f"Number of Cars Encountered: {cars_seen} \n" +
        f"Number of Cars: {total_cars} \n" +
        f"Success Rate: {success_rate} \n" 
        )

def evall(path):
    episodes = len(start_pos)
    #num = 1
    for num in range(1):
        data = {0: {1: np.float64(202.17842231630857)}, 1: {0: np.float64(253.6433701654311), 2: np.float64(167.51263419469572)}, 2: {1: np.float64(197.07577930875814), 3: np.float64(211.5792897443714), 4: np.float64(137.01379357397798)}, 3: {4: np.float64(130.11007105881384), 59: np.float64(273.0631179208947), 60: np.float64(167.56364436796886)}, 4: {5: np.float64(153.49773804208698), 6: np.float64(171.94863631869248)}, 5: {6: np.float64(166.2133220984237), 96: np.float64(218.86071934576964)}, 6: {8: np.float64(175.16408662665202), 34: np.float64(205.44175053015772)}, 8: {2: np.float64(163.92166092914732), 61: np.float64(217.33723632662253)}, 10: {2: np.float64(163.17779868320446)}, 11: {5: np.float64(174.9109360954256), 98: np.float64(270.0377558808626)}, 12: {11: np.float64(219.00710573902836), 13: np.float64(138.2803610662276)}, 13: {12: np.float64(174.45257394376642), 14: np.float64(137.8620247899293)}, 14: {13: np.float64(138.3915077297601), 15: np.float64(170.385936874839)}, 15: {14: np.float64(133.09210488043257), 16: np.float64(133.31790419828096), 37: np.float64(213.51919977537887)}, 16: {17: np.float64(166.14613362849897)}, 17: {15: np.float64(167.04981179696273), 18: np.float64(211.2155668019434)}, 18: {65: np.float64(266.4548275703541), 86: np.float64(207.93996939112182)}, 19: {20: np.float64(213.76514931624038), 66: np.float64(269.44221346593474)}, 20: {21: np.float64(217.60179752847128), 67: np.float64(268.11087348324145)}, 21: {22: np.float64(138.11270830797616), 68: np.float64(271.5473116175993)}, 22: {23: np.float64(171.6576636476762)}, 23: {24: np.float64(170.1210169705509), 69: np.float64(217.9309260623918)}, 24: {15: np.float64(156.45000570976015), 22: np.float64(135.66043695316225), 25: np.float64(216.9334348391145)}, 25: {24: np.float64(166.061296000227), 26: np.float64(268.2485717293546), 27: np.float64(273.97514535424546)}, 26: {25: np.float64(219.04413464300717)}, 27: {25: np.float64(218.4917236352253)}, 28: {29: np.float64(108.2418158714311)}, 29: {74: np.float64(134.68058836656354), 30: np.float64(81.20878774381356)}, 30: {29: np.float64(107.27954044657558), 31: np.float64(65.04365943602598), 78: np.float64(63.481886027799696)}, 31: {30: np.float64(83.4864384885891)}, 32: {33: np.float64(163.43080685294376), 75: np.float64(92.38861399601338)}, 33: {32: np.float64(124.95666540593572), 34: np.float64(206.97835188245787)}, 34: {6: np.float64(168.45111459980504), 33: np.float64(165.8963904690619), 35: np.float64(266.63760814702187)}, 35: {34: np.float64(216.3527935940943)}, 36: {16: np.float64(130.39190814962166)}, 37: {38: np.float64(271.42521345611124), 39: np.float64(203.61668521086995)}, 38: {37: np.float64(214.80040948592838)}, 39: {79: np.float64(270.0516209919573), 81: np.float64(87.58418590991177)}, 40: {36: np.float64(102.8661060468883), 81: np.float64(87.21812650324551)}, 41: {81: np.float64(86.5366949043568)}, 42: {83: np.float64(135.9764474332386), 85: np.float64(171.95479379214714)}, 43: {101: np.float64(273.95415874784186), 102: np.float64(85.87737311308045)}, 44: {43: np.float64(215.3848476637115), 45: np.float64(219.67954751112018)}, 45: {44: np.float64(172.17509120850505), 87: np.float64(269.7819719002381), 88: np.float64(272.03833674345947)}, 46: {44: np.float64(174.4140822002826), 91: np.float64(270.94560523680695)}, 47: {46: np.float64(220.6870158916941)}, 48: {49: np.float64(173.04581385193285), 99: np.float64(216.77393199651289)}, 49: {48: np.float64(175.26448810339767), 51: np.float64(131.91298409035613), 64: np.float64(215.91846103127511)}, 50: {47: np.float64(176.47393753226174), 64: np.float64(217.43096626801264)}, 51: {49: np.float64(173.73299275121082)}, 52: {53: np.float64(271.0211181046088), 54: np.float64(216.66369982934827), 85: np.float64(169.3289600945744)}, 53: {52: np.float64(213.27853094347398), 54: np.float64(215.9021626590692)}, 54: {52: np.float64(217.27100832009245), 53: np.float64(268.0858498102266), 55: np.float64(174.22793291192698)}, 55: {54: np.float64(216.54459434581997), 92: np.float64(219.68963431761958), 93: np.float64(210.95375599126686)}, 56: {57: np.float64(270.4388327245282), 92: np.float64(219.3901178594965), 95: np.float64(275.1510150043298)}, 57: {56: np.float64(218.98529718914796)}, 58: {93: np.float64(213.88523041451467), 59: np.float64(272.19463491473545), 60: np.float64(168.69974455813167)}, 59: {3: np.float64(214.17760556097284), 58: np.float64(216.81913885744297)}, 60: {3: np.float64(213.28735041137196), 58: np.float64(206.85768818365887)}, 61: {62: np.float64(217.86410088974492), 63: np.float64(271.8316408867156)}, 62: {9: np.float64(-np.inf), 63: np.float64(273.0568644192279)}, 63: {61: np.float64(215.16298858951131), 62: np.float64(217.11794744265205)}, 64: {49: np.float64(173.3324558120794), 50: np.float64(168.75710485256616), 90: np.float64(270.1738113921856)}, 65: {86: np.float64(214.0202294206195)}, 66: {19: np.float64(216.91677020934537)}, 67: {20: np.float64(215.61083673397187)}, 68: {21: np.float64(219.4406902834062)}, 69: {70: np.float64(274.58553065085397), 71: np.float64(66.36148117570993)}, 70: {69: np.float64(219.23511812644023)}, 71: {28: np.float64(87.11803114774247), 72: np.float64(-np.inf)}, 73: {28: np.float64(86.67335951337984)}, 74: {24: np.float64(169.83325618553485)}, 75: {32: np.float64(129.20709899873225), 76: np.float64(75.68541631974576)}, 76: {75: np.float64(104.81745442693196), 77: np.float64(62.853589063803135)}, 77: {76: np.float64(80.36657144391398), 78: np.float64(68.70931176696529)}, 78: {30: np.float64(85.7157184732775), 77: np.float64(65.68039922703349)}, 79: {39: np.float64(217.48019001691745)}, 80: {40: np.float64(82.24014546008216)}, 81: {41: np.float64(64.1997083808547), 80: np.float64(61.69804043877931), 82: np.float64(108.86989571759696)}, 82: {80: np.float64(63.06117412994661), 83: np.float64(137.50234633941926)}, 83: {82: np.float64(106.42703391626036), 85: np.float64(171.26676634706823)}, 84: {42: np.float64(135.8641324370955)}, 85: {48: np.float64(175.07270166621777), 52: np.float64(215.71288615327916), 84: np.float64(103.9539772658988)}, 86: {19: np.float64(218.32584086024585), 65: np.float64(266.4940460856527)}, 87: {45: np.float64(218.9457005389325)}, 88: {45: np.float64(219.69823214415487)}, 90: {64: np.float64(218.07728267955568)}, 91: {46: np.float64(218.93661043657175)}, 92: {55: np.float64(170.99072550090708), 56: np.float64(220.19380120778072), 95: np.float64(275.45224419808386)}, 93: {55: np.float64(175.17191724053146), 58: np.float64(215.6943289030683), 94: np.float64(273.16727433238873)}, 94: {93: np.float64(216.61563887483035)}, 95: {92: np.float64(217.47365144693526), 56: np.float64(219.3764780259696)}, 96: {12: np.float64(174.41839995380573), 97: np.float64(268.7594214476127)}, 97: {96: np.float64(216.5480895378247)}, 98: {11: np.float64(217.92146552182487)}, 99: {84: np.float64(107.73304363990005), 100: np.float64(271.1461337454662)}, 100: {99: np.float64(218.6828267118327)}, 101: {43: np.float64(217.58880459113692), 102: np.float64(85.63182106172334)}, 102: {84: np.float64(106.75617543294081)}, 9: {0: -np.inf}, 72: {0: -np.inf}}
        stuff = train2(data, path)
        print(f'Distance travelled: {round(stuff[2], -1)}m')


#evall(73)
#optimizing navig for carpark routing using qlearnig